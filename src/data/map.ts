import { Info } from '../types';

export const MAP: Record<string, Info> = {
    class: { title: 'class — Class Definitions', url: 'reference/compound_stmts.html', anchor: 'class-definitions' },
    def: { title: 'def — Function Definitions', url: 'reference/compound_stmts.html', anchor: 'function-definitions' },
    return: { title: 'return — Return Statement', url: 'reference/simple_stmts.html', anchor: 'the-return-statement' },
    with: { title: 'with — Context Managers', url: 'reference/compound_stmts.html', anchor: 'the-with-statement' },
    yield: { title: 'yield — Yield Expressions', url: 'reference/expressions.html', anchor: 'yield-expressions' },
    async: { title: 'async — Asynchronous Functions', url: 'reference/compound_stmts.html', anchor: 'async-def' },
    await: { title: 'await — Await Expressions', url: 'reference/expressions.html', anchor: 'await-expression' },
    import: { title: 'import — Import Statements', url: 'reference/simple_stmts.html', anchor: 'the-import-statement' },
    from: { title: 'from — Import From Statement', url: 'reference/simple_stmts.html', anchor: 'the-import-statement' },
    try: { title: 'try — Exception Handling', url: 'reference/compound_stmts.html', anchor: 'the-try-statement' },
    if: { title: 'if — Conditional Statements', url: 'reference/compound_stmts.html', anchor: 'the-if-statement' },
    for: { title: 'for — For Loops', url: 'reference/compound_stmts.html', anchor: 'the-for-statement' },
    while: { title: 'while — While Loops', url: 'reference/compound_stmts.html', anchor: 'the-while-statement' },
    except: { title: 'except — Exception Handlers', url: 'reference/executionmodel.html', anchor: 'exceptions' },
    finally: { title: 'finally — Cleanup Code', url: 'reference/compound_stmts.html', anchor: 'the-try-statement' },
    else: { title: 'else — Alternative Execution', url: 'reference/compound_stmts.html', anchor: 'the-if-statement' },
    elif: { title: 'elif — Else If', url: 'reference/compound_stmts.html', anchor: 'the-if-statement' },
    break: { title: 'break — Loop Termination', url: 'reference/simple_stmts.html', anchor: 'the-break-statement' },
    continue: { title: 'continue — Loop Continuation', url: 'reference/simple_stmts.html', anchor: 'the-continue-statement' },
    pass: { title: 'pass — No Operation', url: 'reference/simple_stmts.html', anchor: 'the-pass-statement' },
    lambda: { title: 'lambda — Anonymous Functions', url: 'reference/expressions.html', anchor: 'lambda' },
    'f-string': { title: 'f-strings — Formatted String Literals', url: 'reference/lexical_analysis.html', anchor: 'formatted-string-literals' },
    global: { title: 'global — Global Variables', url: 'reference/simple_stmts.html', anchor: 'the-global-statement' },
    nonlocal: { title: 'nonlocal — Nonlocal Variables', url: 'reference/simple_stmts.html', anchor: 'the-nonlocal-statement' },
    raise: { title: 'raise — Raise Exception', url: 'reference/simple_stmts.html', anchor: 'the-raise-statement' },
    assert: { title: 'assert — Debug Assertion', url: 'reference/simple_stmts.html', anchor: 'the-assert-statement' },
    del: { title: 'del — Delete Statement', url: 'reference/simple_stmts.html', anchor: 'the-del-statement' },
    match: { title: 'match — Pattern Matching (Python 3.10+)', url: 'reference/compound_stmts.html', anchor: 'the-match-statement' },
    case: { title: 'case — Match Case (Python 3.10+)', url: 'reference/compound_stmts.html', anchor: 'the-match-statement' },
    // Built-ins
    print: { title: 'print() — Print Objects', url: 'library/functions.html', anchor: 'print' },
    len: { title: 'len() — Return Length', url: 'library/functions.html', anchor: 'len' },
    range: { title: 'range() — Range Object', url: 'library/functions.html', anchor: 'range' },
    enumerate: { title: 'enumerate() — Enumerate Object', url: 'library/functions.html', anchor: 'enumerate' },
    zip: { title: 'zip() — Zip Iterator', url: 'library/functions.html', anchor: 'zip' },
    map: { title: 'map() — Apply Function', url: 'library/functions.html', anchor: 'map' },
    filter: { title: 'filter() — Filter Elements', url: 'library/functions.html', anchor: 'filter' },
    sorted: { title: 'sorted() — Return Sorted List', url: 'library/functions.html', anchor: 'sorted' },
    reversed: { title: 'reversed() — Reverse Iterator', url: 'library/functions.html', anchor: 'reversed' },
    sum: { title: 'sum() — Sum Iterable', url: 'library/functions.html', anchor: 'sum' },
    max: { title: 'max() — Maximum Value', url: 'library/functions.html', anchor: 'max' },
    min: { title: 'min() — Minimum Value', url: 'library/functions.html', anchor: 'min' },
    abs: { title: 'abs() — Absolute Value', url: 'library/functions.html', anchor: 'abs' },
    round: { title: 'round() — Round Number', url: 'library/functions.html', anchor: 'round' },
    any: { title: 'any() — Any True', url: 'library/functions.html', anchor: 'any' },
    all: { title: 'all() — All True', url: 'library/functions.html', anchor: 'all' },
    open: { title: 'open() — Open File', url: 'library/functions.html', anchor: 'open' },
    isinstance: { title: 'isinstance() — Type Check', url: 'library/functions.html', anchor: 'isinstance' },
    issubclass: { title: 'issubclass() — Subclass Check', url: 'library/functions.html', anchor: 'issubclass' },
    getattr: { title: 'getattr() — Get Attribute', url: 'library/functions.html', anchor: 'getattr' },
    setattr: { title: 'setattr() — Set Attribute', url: 'library/functions.html', anchor: 'setattr' },
    hasattr: { title: 'hasattr() — Has Attribute', url: 'library/functions.html', anchor: 'hasattr' },
    delattr: { title: 'delattr() — Delete Attribute', url: 'library/functions.html', anchor: 'delattr' },
    id: { title: 'id() — Identity', url: 'library/functions.html', anchor: 'id' },
    pow: { title: 'pow() — Exponentiation', url: 'library/functions.html', anchor: 'pow' },
    iter: { title: 'iter() — Iterator', url: 'library/functions.html', anchor: 'iter' },
    next: { title: 'next() — Next Item', url: 'library/functions.html', anchor: 'next' },
    type: { title: 'type() — Return Type', url: 'library/functions.html', anchor: 'type' },
    vars: { title: 'vars() — Object Variables', url: 'library/functions.html', anchor: 'vars' },
    dir: { title: 'dir() — List Attributes', url: 'library/functions.html', anchor: 'dir' },
    help: { title: 'help() — Interactive Help', url: 'library/functions.html', anchor: 'help' },
    input: { title: 'input() — Read Input', url: 'library/functions.html', anchor: 'input' },
    eval: { title: 'eval() — Evaluate Expression', url: 'library/functions.html', anchor: 'eval' },
    exec: { title: 'exec() — Execute Code', url: 'library/functions.html', anchor: 'exec' },
    compile: { title: 'compile() — Compile Source', url: 'library/functions.html', anchor: 'compile' },
    hash: { title: 'hash() — Hash Value', url: 'library/functions.html', anchor: 'hash' },
    hex: { title: 'hex() — Hexadecimal', url: 'library/functions.html', anchor: 'hex' },
    oct: { title: 'oct() — Octal', url: 'library/functions.html', anchor: 'oct' },
    bin: { title: 'bin() — Binary', url: 'library/functions.html', anchor: 'bin' },
    ord: { title: 'ord() — Unicode Point', url: 'library/functions.html', anchor: 'ord' },
    chr: { title: 'chr() — Character', url: 'library/functions.html', anchor: 'chr' },
    ascii: { title: 'ascii() — ASCII Representation', url: 'library/functions.html', anchor: 'ascii' },
    repr: { title: 'repr() — String Representation', url: 'library/functions.html', anchor: 'repr' },
    format: { title: 'format() — Format Value', url: 'library/functions.html', anchor: 'format' },
    divmod: { title: 'divmod() — Division & Modulo', url: 'library/functions.html', anchor: 'divmod' },
    callable: { title: 'callable() — Check if Callable', url: 'library/functions.html', anchor: 'callable' },
    super: { title: 'super() — Access Parent Class', url: 'library/functions.html', anchor: 'super' },
    staticmethod: { title: 'staticmethod() — Static Method', url: 'library/functions.html', anchor: 'staticmethod' },
    classmethod: { title: 'classmethod() — Class Method', url: 'library/functions.html', anchor: 'classmethod' },
    property: { title: 'property() — Property Descriptor', url: 'library/functions.html', anchor: 'property' },
    slice: { title: 'slice() — Slice Object', url: 'library/functions.html', anchor: 'slice' },
    object: { title: 'object() — Base Object', url: 'library/functions.html', anchor: 'object' },
    bytes: { title: 'bytes() — Bytes Type', url: 'library/functions.html', anchor: 'bytes' },
    bytearray: { title: 'bytearray() — Mutable Bytes', url: 'library/functions.html', anchor: 'bytearray' },
    memoryview: { title: 'memoryview() — Memory View', url: 'library/functions.html', anchor: 'memoryview' },
    frozenset: { title: 'frozenset() — Immutable Set', url: 'library/functions.html', anchor: 'frozenset' },
    complex: { title: 'complex() — Complex Number', url: 'library/functions.html', anchor: 'complex' },
    locals: { title: 'locals() — Local Variables', url: 'library/functions.html', anchor: 'locals' },
    globals: { title: 'globals() — Global Variables', url: 'library/functions.html', anchor: 'globals' },
    breakpoint: { title: 'breakpoint() — Debug Breakpoint', url: 'library/functions.html', anchor: 'breakpoint' },
    // Data types
    str: { title: 'str — String Type', url: 'library/stdtypes.html', anchor: 'text-sequence-type-str' },
    int: { title: 'int — Integer Type', url: 'library/functions.html', anchor: 'int' },
    float: { title: 'float — Floating Point', url: 'library/functions.html', anchor: 'float' },
    bool: { title: 'bool — Boolean Type', url: 'library/functions.html', anchor: 'bool' },
    list: { title: 'list — List Type', url: 'library/stdtypes.html', anchor: 'list' },
    dict: { title: 'dict — Dictionary Type', url: 'library/stdtypes.html', anchor: 'dict' },
    set: { title: 'set — Set Type', url: 'library/stdtypes.html', anchor: 'set' },
    tuple: { title: 'tuple — Tuple Type', url: 'library/stdtypes.html', anchor: 'tuple' },
    // Constants
    None: { title: 'None — Null Value', url: 'library/constants.html', anchor: 'None' },
    True: { title: 'True — Boolean True', url: 'library/constants.html', anchor: 'True' },
    False: { title: 'False — Boolean False', url: 'library/constants.html', anchor: 'False' },
    // Exceptions (partial list)
    Exception: { title: 'Exception — Base Exception', url: 'library/exceptions.html', anchor: 'Exception' },
    BaseException: { title: 'BaseException — Root of Exceptions', url: 'library/exceptions.html', anchor: 'BaseException' },
    ValueError: { title: 'ValueError — Invalid Value', url: 'library/exceptions.html', anchor: 'ValueError' },
    TypeError: { title: 'TypeError — Invalid Type', url: 'library/exceptions.html', anchor: 'TypeError' },
    KeyError: { title: 'KeyError — Missing Mapping Key', url: 'library/exceptions.html', anchor: 'KeyError' },
    IndexError: { title: 'IndexError — Sequence Index Out of Range', url: 'library/exceptions.html', anchor: 'IndexError' },
    StopIteration: { title: 'StopIteration — Iterator Exhausted', url: 'library/exceptions.html', anchor: 'StopIteration' },

    // String methods
    strip: { title: 'str.strip() — Remove Whitespace', url: 'library/stdtypes.html', anchor: 'str.strip' },
    lstrip: { title: 'str.lstrip() — Remove Left Whitespace', url: 'library/stdtypes.html', anchor: 'str.lstrip' },
    rstrip: { title: 'str.rstrip() — Remove Right Whitespace', url: 'library/stdtypes.html', anchor: 'str.rstrip' },
    split: { title: 'str.split() — Split String', url: 'library/stdtypes.html', anchor: 'str.split' },
    rsplit: { title: 'str.rsplit() — Right Split String', url: 'library/stdtypes.html', anchor: 'str.rsplit' },
    join: { title: 'str.join() — Join Iterable', url: 'library/stdtypes.html', anchor: 'str.join' },
    replace: { title: 'str.replace() — Replace Substring', url: 'library/stdtypes.html', anchor: 'str.replace' },
    find: { title: 'str.find() — Find Substring', url: 'library/stdtypes.html', anchor: 'str.find' },
    rfind: { title: 'str.rfind() — Find Substring (Right)', url: 'library/stdtypes.html', anchor: 'str.rfind' },
    index: { title: 'str.index() — Index of Substring', url: 'library/stdtypes.html', anchor: 'str.index' },
    rindex: { title: 'str.rindex() — Index of Substring (Right)', url: 'library/stdtypes.html', anchor: 'str.rindex' },
    startswith: { title: 'str.startswith() — Check Prefix', url: 'library/stdtypes.html', anchor: 'str.startswith' },
    endswith: { title: 'str.endswith() — Check Suffix', url: 'library/stdtypes.html', anchor: 'str.endswith' },
    upper: { title: 'str.upper() — Uppercase', url: 'library/stdtypes.html', anchor: 'str.upper' },
    lower: { title: 'str.lower() — Lowercase', url: 'library/stdtypes.html', anchor: 'str.lower' },
    capitalize: { title: 'str.capitalize() — Capitalize First', url: 'library/stdtypes.html', anchor: 'str.capitalize' },
    title: { title: 'str.title() — Title Case', url: 'library/stdtypes.html', anchor: 'str.title' },
    swapcase: { title: 'str.swapcase() — Swap Case', url: 'library/stdtypes.html', anchor: 'str.swapcase' },
    casefold: { title: 'str.casefold() — Case Folding', url: 'library/stdtypes.html', anchor: 'str.casefold' },
    isdigit: { title: 'str.isdigit() — Check Digits', url: 'library/stdtypes.html', anchor: 'str.isdigit' },
    isalpha: { title: 'str.isalpha() — Check Letters', url: 'library/stdtypes.html', anchor: 'str.isalpha' },
    isalnum: { title: 'str.isalnum() — Check Alphanumeric', url: 'library/stdtypes.html', anchor: 'str.isalnum' },
    isspace: { title: 'str.isspace() — Check Whitespace', url: 'library/stdtypes.html', anchor: 'str.isspace' },
    islower: { title: 'str.islower() — Check Lowercase', url: 'library/stdtypes.html', anchor: 'str.islower' },
    isupper: { title: 'str.isupper() — Check Uppercase', url: 'library/stdtypes.html', anchor: 'str.isupper' },
    istitle: { title: 'str.istitle() — Check Title Case', url: 'library/stdtypes.html', anchor: 'str.istitle' },
    count: { title: 'str.count() — Count Occurrences', url: 'library/stdtypes.html', anchor: 'str.count' },
    encode: { title: 'str.encode() — Encode to Bytes', url: 'library/stdtypes.html', anchor: 'str.encode' },
    str_format: { title: 'str.format() — Format String', url: 'library/stdtypes.html', anchor: 'str.format' },
    format_map: { title: 'str.format_map() — Format with Mapping', url: 'library/stdtypes.html', anchor: 'str.format_map' },
    center: { title: 'str.center() — Center String', url: 'library/stdtypes.html', anchor: 'str.center' },
    ljust: { title: 'str.ljust() — Left Justify', url: 'library/stdtypes.html', anchor: 'str.ljust' },
    rjust: { title: 'str.rjust() — Right Justify', url: 'library/stdtypes.html', anchor: 'str.rjust' },
    zfill: { title: 'str.zfill() — Zero Fill', url: 'library/stdtypes.html', anchor: 'str.zfill' },
    partition: { title: 'str.partition() — Partition String', url: 'library/stdtypes.html', anchor: 'str.partition' },
    rpartition: { title: 'str.rpartition() — Right Partition', url: 'library/stdtypes.html', anchor: 'str.rpartition' },
    splitlines: { title: 'str.splitlines() — Split by Lines', url: 'library/stdtypes.html', anchor: 'str.splitlines' },
    expandtabs: { title: 'str.expandtabs() — Expand Tabs', url: 'library/stdtypes.html', anchor: 'str.expandtabs' },
    translate: { title: 'str.translate() — Translate Characters', url: 'library/stdtypes.html', anchor: 'str.translate' },
    maketrans: { title: 'str.maketrans() — Make Translation Table', url: 'library/stdtypes.html', anchor: 'str.maketrans' },
    removeprefix: { title: 'str.removeprefix() — Remove Prefix (Python 3.9+)', url: 'library/stdtypes.html', anchor: 'str.removeprefix' },
    removesuffix: { title: 'str.removesuffix() — Remove Suffix (Python 3.9+)', url: 'library/stdtypes.html', anchor: 'str.removesuffix' },

    // List methods
    append: { title: 'list.append() — Add Item', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    extend: { title: 'list.extend() — Extend List', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    insert: { title: 'list.insert() — Insert Item', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    remove: { title: 'list.remove() — Remove Item', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    pop: { title: 'list.pop() — Remove & Return', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    clear: { title: 'list.clear() — Remove All Items', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    copy: { title: 'list.copy() — Shallow Copy', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    reverse: { title: 'list.reverse() — Reverse In Place', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },
    sort: { title: 'list.sort() — Sort In Place', url: 'library/stdtypes.html', anchor: 'mutable-sequence-types' },

    // Dictionary methods
    keys: { title: 'dict.keys() — Dictionary Keys', url: 'library/stdtypes.html', anchor: 'dict.keys' },
    values: { title: 'dict.values() — Dictionary Values', url: 'library/stdtypes.html', anchor: 'dict.values' },
    items: { title: 'dict.items() — Dictionary Items', url: 'library/stdtypes.html', anchor: 'dict.items' },
    get: { title: 'dict.get() — Get Value', url: 'library/stdtypes.html', anchor: 'dict.get' },
    setdefault: { title: 'dict.setdefault() — Get or Set Default', url: 'library/stdtypes.html', anchor: 'dict.setdefault' },
    update: { title: 'dict.update() — Update Dictionary', url: 'library/stdtypes.html', anchor: 'dict.update' },
    popitem: { title: 'dict.popitem() — Remove & Return Item', url: 'library/stdtypes.html', anchor: 'dict.popitem' },
    fromkeys: { title: 'dict.fromkeys() — Create from Keys', url: 'library/stdtypes.html', anchor: 'dict.fromkeys' },

    // Set methods
    add: { title: 'set.add() — Add Element', url: 'library/stdtypes.html', anchor: 'frozenset.add' },
    discard: { title: 'set.discard() — Remove Element', url: 'library/stdtypes.html', anchor: 'frozenset.discard' },
    union: { title: 'set.union() — Union of Sets', url: 'library/stdtypes.html', anchor: 'frozenset.union' },
    intersection: { title: 'set.intersection() — Intersection', url: 'library/stdtypes.html', anchor: 'frozenset.intersection' },
    difference: { title: 'set.difference() — Difference', url: 'library/stdtypes.html', anchor: 'frozenset.difference' },
    symmetric_difference: { title: 'set.symmetric_difference() — Symmetric Difference', url: 'library/stdtypes.html', anchor: 'frozenset.symmetric_difference' },
    issubset: { title: 'set.issubset() — Check Subset', url: 'library/stdtypes.html', anchor: 'frozenset.issubset' },
    issuperset: { title: 'set.issuperset() — Check Superset', url: 'library/stdtypes.html', anchor: 'frozenset.issuperset' },
    isdisjoint: { title: 'set.isdisjoint() — Check Disjoint', url: 'library/stdtypes.html', anchor: 'frozenset.isdisjoint' },
    intersection_update: { title: 'set.intersection_update() — Update Intersection', url: 'library/stdtypes.html', anchor: 'frozenset.intersection_update' },
    difference_update: { title: 'set.difference_update() — Update Difference', url: 'library/stdtypes.html', anchor: 'frozenset.difference_update' },
    symmetric_difference_update: { title: 'set.symmetric_difference_update() — Update Symmetric Difference', url: 'library/stdtypes.html', anchor: 'frozenset.symmetric_difference_update' }
};

export const BUILTIN_KEYWORDS = ['print', 'len', 'range', 'enumerate', 'zip', 'map', 'filter', 'sorted', 'reversed', 'sum', 'max', 'min', 'abs', 'round', 'type', 'vars', 'dir', 'help', 'input', 'eval', 'exec', 'compile', 'hash', 'hex', 'oct', 'bin', 'ord', 'chr', 'ascii', 'repr', 'format', 'divmod', 'callable', 'super', 'staticmethod', 'classmethod', 'property', 'slice', 'object', 'bytes', 'bytearray', 'memoryview', 'frozenset', 'complex', 'locals', 'globals', 'breakpoint'];
export const DATA_TYPES = ['str', 'int', 'float', 'bool', 'list', 'dict', 'set', 'tuple'];
export const CONSTANTS = ['None', 'True', 'False'];

// Helper to map dunder names to the Data Model special method anchor
export function getDunderInfo(name: string): Info | undefined {
    if (!/^__.*__$/.test(name)) return undefined;
    // Most special methods have anchors like object.__init__, object.__getitem__, etc.
    const anchor = `object.${name}`;
    return { title: `${name} — Special method`, url: 'reference/datamodel.html', anchor };
}
